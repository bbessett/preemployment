#progress-bar {
  background: #0295BE;
  padding: 40px 0;
  color: #fff;
}

#progress-bar .component-progress-steps {
  width: 100%;
  padding: 20px 0;
  display: block;
}

#progress-bar .component-progress-steps .item:last-child {
  margin-bottom: 0;
}

#progress-bar .component-progress-steps .item .circle {
  background-color: white;
  max-width: 64px;
  height: 64px;
  z-index: 2;
  font-size: 36px;
  line-height: 58px;
  text-align: center;
  border-radius: 50%;
  color: #eee;
  font-weight: 600;
  border: 2px solid tu-gray-2;
  margin: 0 auto;
}

#progress-bar .component-progress-steps .item .circle.active {
  background-color: #000;
  border: 2px solid #000;
  color: white;
}

#progress-bar .component-progress-steps .item .line {
  display: none;
  z-index: 1;
}

#progress-bar .component-progress-steps .item .description {
  text-align: center;
  margin-bottom: 40px;
}

#progress-bar .component-progress-steps .item .description.last {
  text-align: center;
}

@media (min-width: 64em) {
  #progress-bar .component-progress-steps .item .description.last {
    width: 190px !important;
    padding-right: 20px !important;
  }
}

#progress-bar .component-progress-steps .item .description h3 {
  line-height: 1.2;
  margin-top: 10px;
  margin-bottom: 15px;
  color: #fff;
  font-size: calc(1.285rem + 0.42vw);
}

@media (min-width: 1200px) {
  #progress-bar .component-progress-steps .item .description h3 {
    font-size: 1.6rem;
  }
}

#progress-bar .component-progress-steps .item .description p {
  font-size: 18px;
  line-height: 1.3;
  margin-bottom: 0;
  font-weight: 300;
}

#progress-bar .progress-image {
  left: 10%;
  right: 0;
}

@media (min-width: 992px) {
  #progress-bar .component-progress-steps {
    display: flex;
    padding: 20px 0 105px 0;
  }
  #progress-bar .component-progress-steps .item {
    position: relative;
    display: flex;
    align-items: center;
    flex-grow: 2;
  }
  #progress-bar .component-progress-steps .item:last-child {
    flex-grow: 0;
    width: 64px;
  }
  #progress-bar .component-progress-steps .item .circle {
    flex-grow: 1;
    margin: auto;
  }
  #progress-bar .component-progress-steps .item .line {
    display: block;
    background-color: #fff;
    flex-grow: 1;
    height: 2px;
  }
  #progress-bar .component-progress-steps .item .description {
    position: absolute;
    top: 65px;
    left: 0;
    max-width: 200px;
    text-align: left;
  }
  #progress-bar .component-progress-steps .item .description p {
    font-size: 1.2rem;
    line-height: 1.3;
    margin-bottom: 0;
  }
  #progress-bar .component-progress-steps .item .description.centered {
    text-align: center;
    left: -70px;
  }
  #progress-bar .component-progress-steps .item .description.text-right {
    text-align: right;
    right: 0;
    left: auto;
  }
  #progress-bar .component-img-push {
    margin-bottom: -90px;
  }
  #progress-bar .align-right {
    text-align: right;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
